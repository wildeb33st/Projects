* Overview
This document is meant to store the notes for the KiCad course on Udemy : Learn KiCad 6 and STM32 Hardware Design (https://www.udemy.com/course/learn-kicad-v6-and-stm32-hardware-design/). The content in this course is considered a prerequisite to the Mixed Signal Design Course. This course is based on the "Bluse Pill Board"
* Course Content
** Schematic
*** STM32 and Decoupling
- Start with drawing or, as more commonly referred to, capturing the schematic
- The specific STM32 that is being used is the STM32F103C8T6
- VDD and other simiarly named pins usually refer to power pins requiring some non-zero i.e. not ground, connection. VSS on the other hand refers to some kind of ground
- It is usually OK to remove the labelling for ground connections as it is very obvious what the ground symbol actually is. However, in some situations where you may have multiple grounds, for example digital and analogue ground,
  it makes sense to keep the labels and differentiate them
- VSS refers to the digital ground and VSSA refers to the analogue ground. In the general case, like this design, it is ok to tie these grounds together
- VAT is usually used if you want to integrate some form of RTC but this design will not be using that so it can be tied to the same power supply as the rest of the VDD pins. This is however, not the case for VDDA which like VSSA is the analogue counterpart to the main supply voltage
- Decoupling capacitors are used by the MCU to store energy for making use of quick switching transients. This isn't as readily supplied by the main supply due to coupling capacitance and the physical distance from the supply. This is also why decoupling capacitors tend to be placed closer to the IC/MCU. There is usually one 100mF capacitor for every VDD and VBAT pin and a bulk decoupling capacitor although not necessary is good practice. The bulk decoupling capacitor can usually be on the order of 10uF
- When dealing with VDDA, it must be considered that analogue signals tend to be more susceptible to noise and so some for of filtering is required. The STM32 recommendation is to use a 10nF and 1uF capacitor to provide filtering to the circuit. The 3.3VA netlist name is used to differentiate between the analogue supply and the digital supply. A resistor or ferrite bead can also be used to form the other part of the filter network (RC Filter) and a decoupling capacitor of 1uF is also used after this bead.
- The 3.3VA is actually the 3.3V digital voltage after it has been filtered and decoupled.

*** Configuration Pins
- The NRST refers to the inverted rest pin and is used to put the MCU into reset mode once the pin is pulled low. Internally, the pin has a pull-up resistor that will prevent the MCU from going into reset mode unintentionally. The pin can therefore be left open unless there is specific need for it. It is good practise however, to add a decoupling capacitor to prevent spurious resets. A switch can also be used to manually reset the MCU if you want
- The BOOT0 pin is used for enabling or disabling the bootloader of the MCU.
- The STM32 MCU can be programmed via JTAG or Serial Wire Debug (SWD) which will require some form of Hardware device for interfacing with the MCU. By pulling the BOOT0 pin hugh, interfaces such as UART, I2C and USB can all be used to interface with the MCU
*** Crystal Circuitry
- The load capacitances for a crystal have different ways they can be calculated. The simeplest is to take the load capacitance listed on the datasheet, in this case 10pF and minus the stray capacitance which is usually on the order of 3-5pF and subtract it from the load capacitaance; Then multiplying the result by 2. Taking a load capacitance of 10pf and assuming a stray capacitance of 5pF, this gives 5pF. Multiplying the result by 2 this gives a result of 10pF for each of the two load capacitors. In this case, the result is the same as the recommended 10pF but this isn't necessarily always the case.
*** USB Circuitry
 - This design will attempt to use a USB micro connector
 - The unused pins should have a "Do not connect" symbol added as they are left floating and in the case where KiCad runs it's rules-check, the design will fail. Pressing "Q" will create a do not connect symbol so that KiCad knows that this is an intended part of the design
 - For this particular design, VBUS will be used as the power input. This is usually around 5V. The power from VBUS will be used to feed the regulator to produce the 3.3V
 - A good idea is usually to check the application notes of the specific MCU that is being used. In the case of the STM32F103 line that is being used in this project, the application notes indicate that there is no embedded pull-up resistor and as such one will need to be added. Failure to do so will prevent the device from preventin itself as a FS (Full-Speed) Device and the USB interface will fail to work as it will not be recognised by the connected system. In the application notes, it is indicated that the D+ line needs to be pulled- up to 3.3V so this must be added in the design

*** Power Supply and Connectors
- The first connector to be added is for the SWD and it will make used of the SWDIO (Serial-Wire Debug I/O) and SWDCLK (Serial-Wire Clock) pins along with ground and power. Therefore a 4-pin connector will be employed in this design. More specifically, a one-column four-pin connector
- Note that up to this point in the design, not all the work done is considered best practise from a EMI or EMC standpoint as that would require more filters and protection to be employed in areas such as these connectors
- This design will use a Linear regualator as it is very simple and straightforward, albeit not the most efficient one. The specific regulator is the AMS1117-3.3 which is oversized for this design. These types of linear drop-out regualators usually require capacitors at the Vin and Vout terminals for stabililty purposes. The datasheet provides more information regarding the the exact values for these capacitors. In this case as 22uF capactor can be placed at the input and output.
- It is usually good practise to have additional filtering for VBUS going into the USB as it is usually very noisy, but for this simple design this will work without it. Howeever, this is an important point to note.
- A power LED is usually a good idea as well, in this case coloured red. The red LED will usually have a voltage drop of approximately 1.8V and so can be hooked up to the 3.3V line. In addition to this a current-limiting resistor is required to prevent the LED from burning out. A 1K5 resistor will be sufficient causing, this will allow the LED to be sufficiently bright without causing it to be burnt-out
- The design will break out a few of the pins to headers. Four pins will be broken out to provide UART and I2C interfaces.
- The rest of pins can be left floating but this is not always the case. STM32 are OK with this though. As before, the "No connect" symbol must be used for floating pins. Again this is good practise to prevent warnings for the ERC (Electrical Rules Check)
- For the I2C interface, pull-up resistors are usually required. It is a good idea to place these on the host side as that is the part of the system you will have control over. Typically 2.2k works but for this design, 1k5 will be used as this prevents too many additional components being added to the BOM (Bill of Materials)

*** ERC and Annotation
 - This step is to (in-part) prepare the PCB for routing. Before that happens, the ERC must be passed and the Annotations will provide useful information for the routing process
 - Part of this process is also the organisation of the design into specific sections. This is good especially for complex designs with more funcional blocks
 - All components should have their labels finished before routing. This can be done automatically or manually.
 - Footprints must also be assigned to the symbols on the schematic. Footprints are the physical representation of the compoenents and will allow KiCad to determine the size and configuration of the compoenentsq relative to the rest of the PCB
 - The ERC can be run after all the symbols are properly labelled. The ERC serves as a form of sanity check and will flag issues. One such issue might be with VDDA pin (9) on the MCU which might be flagged due to KiCad being unaware whether it is a power input or output. This can be overcome with the use of the power flag which tells KiCad that it is behaving as a source.
*** Footprint Assignment
 - After ERC is done, thoroughly review the design to make sure everything is correctly placed and connected, everything has the correct value and that the design is complete.
 - Add the symbols via the footprint assignment tool in KiCad. When assigning the compoenents it is a good idea to go with 0402 or 0603 size compoenents but this will obviously vary depending on the design you are creating. 0805 can be used for larger values components such as the 22uF Caps used in this design. Remember that components like capacitors will be physically larger as their rating increases
** PCB Layout
*** PCB Setup
 - This is a two-layer design as the routing will be fairly simple. There are however multi-layer boards with dedicated ground and power planes.
 - Even in this simple design there are various layer that go into the design of the board. For example, there is the paste layer which is for the soldering, the silkscreen layer which is used to for the laelling on the board, the mask layer whick is for the solder mask and is used to prevent the solder from bridging and the front and back copper layers.
 - Since this is a simple two layer board, the copper layers will be split into the signal and ground planes. The top is usually for signal while the bottom/back is used as a solid ground plane.
 - By using the bottom layer as a solid ground plane, devices can be connected to ground by simply using a via in the board. In ored to use the bottom copper layer as a ground plane, it must be designated as a power plane in KiCad
 - When looking at the physical stackup of the board, the layers relative positions are displayed. The materials and thickness of these layers can also be specified. The dielectric, which is by default set to FR4, is fibreglass. The default board thickness is usually set to 1.6mm
 - Design Rules are very important and are there to make sure everything fits and that the board is manufacturable. These design rules can be based usually on either which standard you are designing for or the board manufacturer you are using. For example, using JLCPCB, they will give you the manufacturing constraints that you must adhere to. These must be transferred over to KiCad's design rules if the board will be manufactured by them.
- The predefined track and via size must also be set. Generally speaking, 0.3mm is sufficient for carrying signals and 0.5mm can be used for carrying power. For vias, a standard that can be used is 0.7mm pad size with a holde diameter of 0.3mm
- This particular design also uses differential pairs for the USB connectors. Professional designs would usually require impedence matching with differential pairs but due to the slow speed of this design, this can be neglected as long as the traces are kept very short.
*** MCU, Decoupling Capacitors and Crystal Layout
- After the PCB setup is complete, the footprints for the components need to be imported in order to begin defining the layout of the components on the board. One of the methods to decide how and when to place the components on the board is to do this based on the level of importance. In this design, the MCU is the "heart" of the design so this is placed first, followed by the decoupling capacitors, then the crystal and later on the bulk capacitor. The "rats nest" will give you an idea of how the components connect to each other within the design
- Generally speaking, decoupling capacitors should be placed close to the pins/components they are decoupling. Larger capacitors can be (I think) be placed further away that smaller capacitors
*** USB and SWD
 - In general priority shuld be given to components carrying faster signals as the routing of these can cause changes in the performance of the components due to effects of capacitance (similar to the efffects of impedence when the transatlantic cable was first built????)
 - One of considerations in component placement is the difficulty of assembly. Components placed close to each other tend to be more difficult to assemble. In the case of the USB connection, altough it can be placed very close to the MCU in the design, it is OK to leave a small bit of space (<10mm) without impedence matching being necessary at these speeds.

** PCB Routing
   - PCB routing is both art and science. It is good practice to route the most important components first. It is also advised to keep the traces apart from each other as much as possible to prevent capacitance forming between traces.
   - This design makes use of a ground plane and as such routing to ground can be done with relative ease with vias.
   - Large power components usually require larger traces.
